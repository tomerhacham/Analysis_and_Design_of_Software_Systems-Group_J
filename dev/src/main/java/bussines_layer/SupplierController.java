package bussines_layer;

import java.util.HashMap;
import java.util.LinkedList;

/**
 * Singleton SupplierController.
 * Responsible of all the Suppliers in the system.
 * Holds documentation of all the SupplierCard.
 *
 * Functionality that related to Suppliers.
 *
 */

//Singleton
public class SupplierController {

    //fields
    // static variable single_instance of type Singleton
    private static SupplierController instance = null;
    private HashMap<Integer , SupplierCard> suppliers;   //supplierID --> supplierCard

    //constructor
    private SupplierController(){
        suppliers = new HashMap<Integer, SupplierCard>();
    }

    // static method to create instance of Singleton class
    public static SupplierController getInstance()  {
        if (instance == null)
            instance = new SupplierController();

        return instance;
    }

    //region Create supplier

    /**
     * create new supplier card for the givven supplier
     * @param SupplierName - supplier name
     * @param Address - address of the supplier
     * @param Email -
     * @param PhoneNumber
     * @param id - unique (generated by the supplierController class)
     * @param BankAccountNum
     * @param Payment
     * @param ContactsName
     * @param type - enum;
     * @return
     */
    public Result createSupplierCard(String SupplierName , String Address , String Email , String PhoneNumber ,
                                   int id ,String BankAccountNum , String Payment , LinkedList<String> ContactsName, supplierType type){
        SupplierCard supplierCard = new SupplierCard(SupplierName, Address, Email, PhoneNumber,
                id ,BankAccountNum ,Payment ,ContactsName, type);
        return addSupplierCardToList(supplierCard);
       // contract.addSpplierToProductController(supplierCard);     //TODO check
    }

    /**
     * add new supplier to the list
     * @param supplierCard
     */
    private Result addSupplierCardToList(SupplierCard supplierCard){
        Result result;
        if (suppliers.containsKey(supplierCard.getId())){
            result=new Result(false,null, String.format("There is Already a supplier with the same ID %d",supplierCard.getId() ));
        }
        else{
            suppliers.put(supplierCard.getId() , supplierCard);
            result=new Result(true, supplierCard, String.format("Supplier %s has been Added", supplierCard));
        }
        return result;
    }
    //endregion

    //#region Edit supplier

    /**
     * set new name to a supplier
     * @param id - Integer, allocated by the supplierController
     * @param newName
     * @return
     */
    public Result ChangeSupplierName(int id , String newName){
        Result result;
        if ( !isExist(id)){
            result=new Result(false,null, String.format("Could not find supplier with ID %d",id ));
        }
        else {
            SupplierCard sc = suppliers.get(id);
            sc.setSupplierName(newName);
            result=new Result(true,sc, String.format("Supplier %d has been edited", id) );
        }
        return result;
    }

    /**
     * set new address to a supplier
     * @param id - Integer, allocated by the supplierController
     * @param newAddress
     * @return
     */
    public Result ChangeAddress(int id ,String newAddress){
        Result result;
        if ( !isExist(id)){
            result=new Result(false,null, String.format("Could not find supplier with ID %d",id ));
        }
        else {
            SupplierCard sc = suppliers.get(id);
            sc.setAddress(newAddress);
            result=new Result(true,sc, String.format("Supplier %d has been edited", id) );
        }
        return result;
    }

    /**
     * set new email to a supplier
     * @param id - Integer, allocated by the supplierController
     * @param newEmail
     * @return
     */
    public Result ChangeEmail(int id , String newEmail){
        Result result;
        if ( !isExist(id)){
            result=new Result(false,null, String.format("Could not find supplier with ID %d",id ));
        }
        else {
            SupplierCard sc = suppliers.get(id);
            sc.setEmail(newEmail);
            result=new Result(true,sc, String.format("Supplier %d has been edited", id) );
        }
        return result;
    }

    /**
     * set new phone number to a supplier
     * @param id - Integer, allocated by the supplierController
     * @param newPhoneNum
     * @return
     */
    public Result ChangePhoneNumber(int id, String newPhoneNum){
        Result result;
        if ( !isExist(id)){
            result=new Result(false,null, String.format("Could not find supplier with ID %d",id ));
        }
        else {
            SupplierCard sc = suppliers.get(id);
            sc.setPhoneNumber(newPhoneNum);
            result=new Result(true,sc, String.format("Supplier %d has been edited", id) );
        }
        return result;
    }

    /**
     * set new bank account number to a supplier
     * @param id - Integer, allocated by the supplierController
     * @param newBankAccount
     * @return
     */
    public Result ChangeBankAccount(int id, String newBankAccount){
        Result result;
        if ( !isExist(id)){
            result=new Result(false,null, String.format("Could not find supplier with ID %d",id ));
        }
        else {
            SupplierCard sc = suppliers.get(id);
            sc.setBankAccountNum(newBankAccount);
            result=new Result(true,sc, String.format("Supplier %d has been edited", id) );
        }
        return result;
    }

    /**
     * set new payment type to a supplier
     * @param id - Integer, allocated by the supplierController
     * @param newPayment
     * @return
     */
    public Result ChangePayment(int id ,String newPayment){
        Result result;
        if ( !isExist(id)){
            result=new Result(false,null, String.format("Could not find supplier with ID %d",id ));
        }
        else {
            SupplierCard sc = suppliers.get(id);
            sc.setPayment(newPayment);
            result=new Result(true,sc, String.format("Supplier %d has been edited", id) );
        }
        return result;
    }

    /**
     * delete contact name
     * @param id - Integer, allocated by the supplierController
     * @param name2Delete
     * @return
     */
    public Result DeleteContactName(int id , String name2Delete){
        Result result;
        if ( !isExist(id)){
            result=new Result(false,null, String.format("Could not find supplier with ID %d",id ));
        }
        else {
            SupplierCard sc = suppliers.get(id);
            return sc.deleteContactName(name2Delete);
        }
        return result;
    }

    //add a conatct name  //TODO duplicate
/*
    public void AddContactName(int id ,String newContactName){
        if ( ! isExist(id)){
            return;
        }
        SupplierCard sc = suppliers.get(id);
        sc.addContactName(newContactName);
    }
*/


    public void AddContactName(int id ,LinkedList<String> contactsName){
        if ( ! isExist(id)){
            return;
        }
        SupplierCard sc = suppliers.get(id);
        sc.setContactsName(contactsName);
    }

    //change the supplier kind
    public void ChangeSupplierKind(int id ,supplierType type){
        if ( ! isExist(id)){
            return;
        }
        suppliers.get(id).setType(type);
    }

//#endregion

    //region Utilities
    /**
     * return instance of supplier card by its ID
     * @param id
     * @return
     */
    public Result getSupplierCardByID (Integer id){
        Result result;
        if ( !isExist(id)){
            result= new Result(false,null, String.format("There is not supplier with ID %d",id ));
        }
        else{
            SupplierCard supplier =suppliers.get(id);
            result = new Result(true, supplier, String.format("Supplier %s has been found",supplier ));
        }
        return result;
    }

    /**
     * concat string which represent each entity of supplierCard in the system
     * @return
     */
    public Result printallsuppliers() {
        Result result;
        String msg="";
        LinkedList<String> toreturn = new LinkedList<String>();

        if (suppliers.isEmpty()){
            msg=msg.concat("There is no suppliers in the system\n");
            result=new Result(false,null,msg);
        }
        else {
            for (SupplierCard supplier : suppliers.values()) {
                msg = msg.concat(supplier + "\n");
            }
            result=new Result(true, msg, msg);
        }
        return result;
    }

    public boolean isExist (int id){
        if ( ! suppliers.containsKey(id)){
            //sz_Result.setMsg("There's No Such Supplier in the System");  //TODO RESULT
            return false;
        }
        return true;
    }

    public HashMap<Integer, SupplierCard> getSuppliers() {
        return suppliers;
    }



    //endregion

/*


    //UPDATE CONTRACT
    //create new contract
    public Contract CreateContract(LinkedList<String> category , int supId ,String kind ){
        Contract c = new Contract(category , supId , kind );
        //suppliers.get(supId).setContract(c);
        return c;
    }

    //change contract category
    public void addCategory(int id , LinkedList<String> category){
        if ( ! isExist(id)){
            return;
        }
        suppliers.get(id).getContract().setCategory(category);
    }

    public void addCategory(int id , String category){
        if ( ! isExist(id)){
            return;
        }
        suppliers.get(id).getContract().addCategory(category);
    }

    public void deleteCategory(int id , String category){
        if ( ! isExist(id)){
            return;
        }
        suppliers.get(id).getContract().removeCategory(category);
    }

    //add new product to the contract
    public void addProductToContract(int id ,Product product){

        //check if the product category is in the suppliers category list
        if ( ! isExist(id)){
            return;
        }
        boolean contatinCategory = suppliers.get(id).checkCategory(product.getCategory());

        if (contatinCategory){
            suppliers.get(id).addProduct(product);
        }
        else{
            sz_Result.setMsg("The Products Category Is Not In The Suppliers Category List\n");
        }
    }

    public void addProductToContract(int id ,Product[] product){
        HashMap<Integer, Product> products = new HashMap<>();
        for (Product p:product) {
            products.put(p.getCatalogID(), p);
        }
        if ( ! isExist(id)){
            return;
        }
        suppliers.get(id).getContract().setProducts(products);
    }

    // delete a product the supplier can supply from the contract
    public void deleteProduct (int id, int catalogid){
        if ( ! isExist(id)){
            return;
        }
        suppliers.get(id).removeProduct(catalogid);
    }




    //UPDATE COST ENGINEERING
    //create cost enfineering
    public boolean createCostEngineering(int id){
        if ( ! isExist(id)){
            return false;
        }
        suppliers.get(id).createCostEngineering();
        return true;
    }

    //update min quantity
    public void changeMinQuantity(int id , int catalogid , int minQuantity){
        if ( ! isExist(id)){
            return;
        }
        suppliers.get(id).getCostEngineering().changeMinQuantity(catalogid , minQuantity);
    }

    public void changeMinQuantity(int id ,HashMap<Integer, Integer> minQuntity){
        if ( ! isExist(id)){
            return;
        }
        suppliers.get(id).getCostEngineering().setMinQuntity(minQuntity);
    }

    //update new price with sale
    public void changenewPriceAfterSale(int id , int catalogid , int price){
        if ( ! isExist(id)){
            return;
        }
        suppliers.get(id).getCostEngineering().changeNewPrice(catalogid , price);
    }

    public void changenewPriceAfterSale(int id , HashMap<Integer, Integer> newPrice){
        if ( ! isExist(id)){
            return;
        }
        suppliers.get(id).getCostEngineering().setNewPrice(newPrice);
    }

    //add product to cost engineering
    public void addProductToCostEng(int id , int catalogid , int minQuantity , int price){

        if (suppliers.containsKey(id)){
            //check if the product is in the suppliers product list
            boolean containProduct = suppliers.get(id).getContract().checkProduct(catalogid);

            if(containProduct){
                suppliers.get(id).getCostEngineering().addProduct(catalogid , minQuantity , price);
            }
            else{
                sz_Result.setMsg("The Product Is Not In The Product list");
            }
        }

        else{
            sz_Result.setMsg("The Supplier Is Not In The System");
        }

    }

    //delete product from cost engineering
    public void removeProductCostEng(int id , int catalogid){

        //check if the product is in the suppliers product list
        if ( ! isExist(id)){
            return;
        }
        boolean containProduct = suppliers.get(id).getContract().checkProduct(catalogid);

        if(containProduct){
            suppliers.get(id).getCostEngineering().removeProduct(catalogid);
        }
        else{
            sz_Result.setMsg("The Product Is Not In The Cost Engineering");
        }
    }

    public LinkedList<Product> getAllSupProducts(int supId) {

        SupplierCard spCard =  suppliers.get(supId);
        if (spCard.getContract().getProducts().isEmpty()){
            sz_Result.setMsg("The Supplier Has No Products");
        }
        return spCard.getContract().getProducts();
    }
*/


}